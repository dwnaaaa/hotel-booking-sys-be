CREATE OR REPLACE FUNCTION compute_age(in_birth_date DATE) RETURN NUMBER IS
    v_birthdate NUMBER;
BEGIN
    SELECT FLOOR(MONTHS_BETWEEN(SYSDATE, in_birth_date) / 12) INTO v_birthdate FROM dual;
    RETURN v_birthdate;
END;

CREATE TABLE GUEST (
    GUEST_ID            NUMBER(11, 0) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FIRST_NAME          VARCHAR2(20) NOT NULL,
    MIDDLE_NAME         VARCHAR2(20) NOT NULL,
    LAST_NAME           VARCHAR2(20) NOT NULL,
    BIRTHDAY            DATE NOT NULL,
    STREET              VARCHAR2(20),
    CITY                VARCHAR2(20),
    STATE               VARCHAR2(20),
    ZIP_CODE            VARCHAR2(4),
    CONTACT_NO          VARCHAR2(11),
    EMAIL_ADD           VARCHAR2(30),
    CONSTRAINT GUEST_PK PRIMARY KEY (GUEST_ID)
);

CREATE SEQUENCE GUEST_SEQ
START WITH 1
INCREMENT BY 1;

CREATE VIEW GUEST_VIEW AS
SELECT
    GUEST_ID,
    FIRST_NAME,
    MIDDLE_NAME,
    LAST_NAME,
    BIRTHDAY,
    COMPUTE_AGE(BIRTHDAY) AS AGE,
    STREET,
    CITY,
    STATE,
    ZIP_CODE,
    CONTACT_NO,
    EMAIL_ADD
FROM GUEST;

CREATE TABLE ROOM_TYPE (
    ROOM_TYPE           CHAR(1) PRIMARY KEY,
    ROOM_TYPE_NAME      VARCHAR2(50) NOT NULL,
    BED_TYPE            CHAR(1) NOT NULL,
    ROOM_TYPE_DESC      VARCHAR2(100) NOT NULL,
    PRICE               NUMBER (5,0) NOT NULL,
    MAX_GUESTS          NUMBER (2, 0) NOT NULL,
    NO_OF_BEDS          NUMBER (2, 0) NOT NULL,
    AREA                NUMBER (3, 0) NOT NULL
);

CREATE TABLE BED_TYPE (
    BED_TYPE CHAR(1) PRIMARY KEY,
    BED_TYPE_NAME VARCHAR2(30) NOT NULL
);

CREATE TABLE CARD (
    CARD_ID             NUMBER(11, 0) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CARD_NUMBER         VARCHAR2(16) NOT NULL,
    CVV                 VARCHAR2(3) NOT NULL,
    EXPIRATION_DATE     DATE NOT NULL,
    CONSTRAINT CARD_PK PRIMARY KEY (CARD_ID)
);

CREATE SEQUENCE CARD_SEQ
START WITH 1
INCREMENT BY 1;

CREATE TABLE EMPLOYEE_TYPE(
    EMPLOYEE_TYPE       CHAR(1) PRIMARY KEY,
    EMPLOYEE_TYPE_NAME  VARCHAR2(20) NOT NULL
);

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID   NUMBER(11, 0) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRST_NAME    VARCHAR2(20) NOT NULL,
    MIDDLE_NAME   VARCHAR2(25) NOT NULL,
    LAST_NAME     VARCHAR2(25) NOT NULL,
    SALARY        NUMBER(6,0) NOT NULL,
    EMPLOYEE_TYPE CHAR(1) NOT NULL,
    CONSTRAINT    EMPLOYEE_TYPE_FK FOREIGN KEY (EMPLOYEE_TYPE) REFERENCES EMPLOYEE_TYPE (EMPLOYEE_TYPE)
);

CREATE SEQUENCE EMPLOYEE_SEQ
START WITH 1
INCREMENT BY 1;

-- CREATE TABLE PRODUCTS (
--     PRODUCT_ID      VARCHAR2(6) PRIMARY KEY,
--     PRODUCT_NAME    VARCHAR2(50) NOT NULL,
--     PRICE           NUMBER(6,0) NOT NULL
-- );

CREATE TABLE SERVICES (
    SERVICE_CODE    NUMBER(4,0) PRIMARY KEY,
    SERVICE_NAME    VARCHAR2(50) NOT NULL,
    DESCRIPTION     VARCHAR2(100),
    EMPLOYEE_TYPE   CHAR(1) NOT NULL,
    PRICE           NUMBER(6,0) NOT NULL,
    CONSTRAINT SERVICES_FK1 FOREIGN KEY (EMPLOYEE_TYPE) REFERENCES EMPLOYEE_TYPE (EMPLOYEE_TYPE)
);

CREATE TABLE ROOM_TYPE_SERVICE (
    SERVICE_CODE        NUMBER(4,0) NOT NULL,
    ROOM_TYPE           CHAR(1) NOT NULL,
    CONSTRAINT RTS_PK PRIMARY KEY (SERVICE_CODE, ROOM_TYPE),
    CONSTRAINT RTS_FK1 FOREIGN KEY (SERVICE_CODE) REFERENCES SERVICES (SERVICE_CODE),
    CONSTRAINT RTS_FK2 FOREIGN KEY (ROOM_TYPE) REFERENCES ROOM_TYPE (ROOM_TYPE)
);

CREATE TABLE BRN (
    BRN                 VARCHAR2(6) NOT NULL,
    PRIMARY_GUEST_ID    NUMBER(11, 0) NOT NULL,
    BOOKING_DATE        DATE NOT NULL,
    CHECK_IN_DATE       DATE NOT NULL,
    CHECK_OUT_DATE      DATE,
    ROOM_TYPE           CHAR(1) NOT NULL,
    NO_OF_ROOMS         NUMBER(2,0) NOT NULL,
    CONSTRAINT BRN_PK1 PRIMARY KEY (BRN),
    CONSTRAINT BRN_FK1 FOREIGN KEY (ROOM_TYPE) REFERENCES ROOM_TYPE (ROOM_TYPE),
    CONSTRAINT BRN_FK2 FOREIGN KEY (PRIMARY_GUEST_ID) REFERENCES GUEST (GUEST_ID)
);

CREATE TABLE BRN_GUEST (
    BRN                 VARCHAR2(6) NOT NULL,
    GUEST_ID            NUMBER(11, 0) NOT NULL,
    CONSTRAINT BG_TABLE_PK PRIMARY KEY (BRN, GUEST_ID),
    CONSTRAINT BG_TABLE_FK1 FOREIGN KEY (BRN) REFERENCES BRN (BRN),
    CONSTRAINT BG_TABLE_FK2 FOREIGN KEY (GUEST_ID) REFERENCES GUEST (GUEST_ID)
);

CREATE TABLE ROOM (
    ROOM_NUMBER NUMBER(3, 0) PRIMARY KEY,
    ROOM_TYPE CHAR(1) NOT NULL,
    BOOKED_BRN VARCHAR2(6) DEFAULT 'VACANT',
    CONSTRAINT ROOM_TYPE_FK FOREIGN KEY (ROOM_TYPE) REFERENCES ROOM_TYPE (ROOM_TYPE)
);

CREATE TABLE BRN_ROOMS (
    BRN                 VARCHAR2(6) NOT NULL,
    ROOM_NUMBER         NUMBER(3,0) NOT NULL,
    CONSTRAINT BR_TABLE_PK PRIMARY KEY (BRN, ROOM_NUMBER),
    CONSTRAINT BR_TABLE_FK1 FOREIGN KEY (BRN) REFERENCES BRN (BRN),
    CONSTRAINT BR_TABLE_FK2 FOREIGN KEY (ROOM_NUMBER) REFERENCES ROOM (ROOM_NUMBER)
);

CREATE TABLE BILL_PAYMENT (
    BP_ID               NUMBER(11, 0) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    BRN                 VARCHAR2(6) NOT NULL,
    TOTAL               NUMBER(6,0) NOT NULL,
    PAYMENT_METHOD      CHAR(1),
    CARD_ID             NUMBER(11, 0),
    CONSTRAINT BP_TABLE_PK PRIMARY KEY (BP_ID),
    CONSTRAINT BP_TABLE_FK1 FOREIGN KEY (BRN) REFERENCES BRN (BRN)
);

CREATE SEQUENCE BP_SEQ
START WITH 1
INCREMENT BY 1;

CREATE TABLE BRN_SERVICES (
    BRN             VARCHAR2(6) NOT NULL,
    ROOM_NUMBER     NUMBER(3,0),
    SERVICE_CODE    NUMBER(4,0) NOT NULL,
    PRICE           NUMBER (6,0) NOT NULL,
    QUANTITY        NUMBER(2,0) DEFAULT 1,
    CONSTRAINT BRN_S_PK PRIMARY KEY (BRN, SERVICE_CODE),
    CONSTRAINT BRN_S_FK1 FOREIGN KEY (BRN) REFERENCES BRN (BRN),
    CONSTRAINT BRN_S_FK2 FOREIGN KEY (ROOM_NUMBER) REFERENCES ROOM (ROOM_NUMBER),
    CONSTRAINT BRN_S_FK3 FOREIGN KEY (SERVICE_CODE) REFERENCES SERVICES (SERVICE_CODE)
);

CREATE TABLE USERS (
    USERNAME        VARCHAR2(25) NOT NULL,
    PASSWORD        VARCHAR2(80) NOT NULL,
    EMPLOYEE_ID     NUMBER(11, 0) NOT NULL,
    ROLE            VARCHAR2(10) NOT NULL,
    CONSTRAINT USER_PK PRIMARY KEY (USERNAME),
    CONSTRAINT USER_FK FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

CREATE OR REPLACE FUNCTION convert_to_date(in_date VARCHAR2) RETURN DATE IS
BEGIN
    RETURN TO_DATE(in_date, 'YYYY-MM-DD');
END;

CREATE OR REPLACE FUNCTION generate_random_alphanumeric RETURN VARCHAR2 IS
    v_random_string VARCHAR2(6);
BEGIN
    SELECT DBMS_RANDOM.STRING('X',6)
    INTO v_random_string
    FROM dual;

    RETURN v_random_string;
END;

CREATE OR REPLACE FUNCTION generate_brn RETURN VARCHAR2 IS
    v_generated_brn VARCHAR2(6);
    v_brn_count NUMBER(1);
BEGIN
    LOOP
        SELECT GENERATE_RANDOM_ALPHANUMERIC() INTO v_generated_brn FROM DUAL;
        SELECT COUNT(BRN) INTO v_brn_count FROM BRN WHERE BRN = v_generated_brn;
        IF v_brn_count = 0 THEN
           EXIT;
        END IF;
    END LOOP;
    RETURN v_generated_brn;
END;

CREATE OR REPLACE PROCEDURE add_booking (
    in_primary_guest_id NUMBER,
    in_booking_date VARCHAR2,
    in_check_in_date VARCHAR2,
    in_check_out_date VARCHAR2,
    in_room_type VARCHAR2,
    in_no_of_rooms NUMBER
) IS
    v_generated_brn VARCHAR2(6);
BEGIN
    SELECT GENERATE_BRN() INTO v_generated_brn FROM DUAL;
    INSERT INTO BRN (BRN,PRIMARY_GUEST_ID, BOOKING_DATE, CHECK_IN_DATE, CHECK_OUT_DATE, ROOM_TYPE, NO_OF_ROOMS)
    VALUES (v_generated_brn, in_primary_guest_id, CONVERT_TO_DATE(in_booking_date),
            CONVERT_TO_DATE(in_check_in_date), CONVERT_TO_DATE(in_check_out_date), in_room_type, in_no_of_rooms);
END;

-- CREATE OR REPLACE FUNCTION generate_guest_id RETURN VARCHAR2 IS
--     v_generated_guest_id VARCHAR2(6);
--     v_guest_count NUMBER(1);
-- BEGIN
--     LOOP
--         SELECT GENERATE_RANDOM_ALPHANUMERIC() INTO v_generated_guest_id FROM DUAL;
--         SELECT COUNT(GUEST_ID) INTO v_guest_count FROM GUEST WHERE GUEST_ID = v_generated_guest_id;
--         IF v_guest_count = 0 THEN
--            EXIT;
--         END IF;
--     END LOOP;
--     RETURN v_generated_guest_id;
-- END;
--
-- CREATE OR REPLACE PROCEDURE add_guest (
--     in_first_name VARCHAR2,
--     in_middle_name VARCHAR2,
--     in_last_name VARCHAR2,
--     in_birthday VARCHAR2,
--     in_street VARCHAR2,
--     in_city VARCHAR2,
--     in_state VARCHAR2,
--     in_zip_code VARCHAR2,
--     in_contact_no VARCHAR2,
--     in_email_add VARCHAR2
-- ) IS
--     v_generated_guest_id VARCHAR2(6);
-- BEGIN
--     SELECT GENERATE_GUEST_ID() INTO v_generated_guest_id FROM DUAL;
--     INSERT INTO GUEST (GUEST_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, BIRTHDAY, STREET, CITY, STATE, ZIP_CODE, CONTACT_NO, EMAIL_ADD)
--     VALUES (v_generated_guest_id, in_first_name, in_middle_name, in_last_name, CONVERT_TO_DATE(in_birthday),
--             in_street, in_city, in_state, in_zip_code, in_contact_no, in_email_add);
-- END;

-- CREATE OR REPLACE FUNCTION generate_card_id RETURN VARCHAR2 IS
--     v_generated_card_id VARCHAR2(6);
--     v_card_id_count NUMBER(1);
-- BEGIN
--     LOOP
--         SELECT GENERATE_RANDOM_ALPHANUMERIC() INTO v_generated_card_id FROM DUAL;
--         SELECT COUNT(CARD_ID) INTO v_card_id_count FROM CARD WHERE CARD_ID = v_generated_card_id;
--         IF v_card_id_count = 0 THEN
--            EXIT;
--         END IF;
--     END LOOP;
--     RETURN v_generated_card_id;
-- END;
--
-- CREATE OR REPLACE PROCEDURE add_card (
--     in_card_number VARCHAR2,
--     in_cvv VARCHAR2,
--     in_expiration_date VARCHAR2
-- ) IS
--     v_generated_card_id VARCHAR2(6);
-- BEGIN
--     SELECT GENERATE_CARD_ID() INTO v_generated_card_id FROM DUAL;
--     INSERT INTO CARD (CARD_ID, CARD_NUMBER, CVV, EXPIRATION_DATE)
--     VALUES (v_generated_card_id, in_card_number, in_cvv,
--             TO_DATE(in_expiration_date, 'YYYY-MM'));
-- END;

-- CREATE OR REPLACE FUNCTION generate_bp_id RETURN VARCHAR2 IS
--     v_generated_bp_id VARCHAR2(6);
--     v_bp_count NUMBER(1);
-- BEGIN
--     LOOP
--         SELECT GENERATE_RANDOM_ALPHANUMERIC() INTO v_generated_bp_id FROM DUAL;
--         SELECT COUNT(BP_ID) INTO v_bp_count FROM BILL_PAYMENT WHERE BP_ID = v_generated_bp_id;
--         IF v_bp_count = 0 THEN
--            EXIT;
--         END IF;
--     END LOOP;
--     RETURN v_generated_bp_id;
-- END;
--
CREATE OR REPLACE PROCEDURE add_bill_payment (
    in_brn VARCHAR2,
    in_total NUMBER,
    in_payment_method CHAR,
    in_card_id NUMBER DEFAULT NULL
) IS

BEGIN
    INSERT INTO BILL_PAYMENT (BRN, TOTAL, PAYMENT_METHOD, CARD_ID)
    VALUES (in_brn, in_total,
            in_payment_method, in_card_id);
END;

COMMIT;